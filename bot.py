import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiohttp import web
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7735194034:AAHvaLquKVm4I1QpdjVx5J5YOCqlGAMJDBk'
ADMIN_ID = 7455246670
GROUP_ID = -1002554033993
WEBHOOK_URL = 'https://my-tg-bot-8mcp.onrender.com/webhook'  # URL –≤–µ–±—Ö—É–∫–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
signals = {}  # {id: {"text": str, "users": [usernames]}}
usernames = {}  # user_id: username

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class SignalStates(StatesGroup):
    waiting_for_signal_text = State()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫
async def set_webhook():
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    response = requests.post(url, data={"url": WEBHOOK_URL})
    print(response.json())

# –•–µ–Ω–¥–ª–µ—Ä—ã
async def webhook(request):
    json_str = await request.json()  # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    update = types.Update.parse_obj(json_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await dp.process_update(update)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ aiogram
    return web.Response()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def admin_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[ 
            [InlineKeyboardButton(text="üíπ –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="give_signal")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞", callback_data="list_users")],
            [InlineKeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="list_signals")]
        ]
    )
    return keyboard

def signals_list_keyboard():
    buttons = [
        [InlineKeyboardButton(text=signal["text"][:30], callback_data=f"signal_{signal_id}")]
        for signal_id, signal in signals.items()
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def signal_detail_keyboard(signal_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[ 
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data=f"delete_signal_{signal_id}"),
             InlineKeyboardButton(text="üë• –ö—Ç–æ –∑–∞—à–µ–ª", callback_data=f"users_in_signal_{signal_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_signals")]
        ]
    )
    return keyboard

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±–µ–∫–æ–≤
@dp.message(Command("start"))
async def start(message: types.Message):
    usernames[message.from_user.id] = message.from_user.username or message.from_user.full_name
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=admin_menu())
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û–∂–∏–¥–∞–π —Å–∏–≥–Ω–∞–ª—ã.")

@dp.callback_query(F.data == "give_signal")
async def give_signal(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    ))
    await state.set_state(SignalStates.waiting_for_signal_text)

@dp.message(SignalStates.waiting_for_signal_text)
async def save_signal_text(message: types.Message, state: FSMContext):
    signal_id = str(len(signals) + 1)
    signals[signal_id] = {"text": message.text, "users": []}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.send_message(GROUP_ID, f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª!",
                            reply_markup=InlineKeyboardMarkup(
                                inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data=f"join_{signal_id}")]]
                            ))

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
    for user_id in usernames:
        await bot.send_message(user_id, f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª.",
                               reply_markup=InlineKeyboardMarkup(
                                   inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data=f"join_{signal_id}")]]
                               ))

    await message.answer("–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞—Å—Å–ª–∞–Ω!", reply_markup=admin_menu())
    await state.clear()

# –ü—Ä–æ—á–∏–µ –∫–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä—ã...
# (–û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –≤–µ–±—Ö—É–∫–∞–º–∏
async def on_start(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await set_webhook()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_get('/', on_start)  # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    app.router.add_post('/webhook', webhook)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get("PORT", 8080))  # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç 8080
    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    await web._run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    asyncio.run(main())
