import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7735194034:AAHvaLquKVm4I1QpdjVx5J5YOCqlGAMJDBk'
ADMIN_ID = 7455246670
GROUP_ID = -1002554033993

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
signals = {}  # {id: {"text": str, "users": [usernames]}}
usernames = {}  # user_id: username


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class SignalStates(StatesGroup):
    waiting_for_signal_text = State()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def admin_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíπ –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="give_signal")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞", callback_data="list_users")],
            [InlineKeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="list_signals")]
        ]
    )
    return keyboard


def signals_list_keyboard():
    buttons = [
        [InlineKeyboardButton(text=signal["text"][:30], callback_data=f"signal_{signal_id}")]
        for signal_id, signal in signals.items()
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def signal_detail_keyboard(signal_id):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data=f"delete_signal_{signal_id}"),
                InlineKeyboardButton(text="üë• –ö—Ç–æ –∑–∞—à–µ–ª", callback_data=f"users_in_signal_{signal_id}")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_signals")]
        ]
    )
    return keyboard


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def start(message: types.Message):
    usernames[message.from_user.id] = message.from_user.username or message.from_user.full_name
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω!", reply_markup=admin_menu())
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û–∂–∏–¥–∞–π —Å–∏–≥–Ω–∞–ª—ã.")


@dp.callback_query(F.data == "give_signal")
async def give_signal(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    ))
    await state.set_state(SignalStates.waiting_for_signal_text)


@dp.message(SignalStates.waiting_for_signal_text)
async def save_signal_text(message: types.Message, state: FSMContext):
    signal_id = str(len(signals) + 1)
    signals[signal_id] = {"text": message.text, "users": []}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.send_message(GROUP_ID, f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª!",
                            reply_markup=InlineKeyboardMarkup(
                                inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data=f"join_{signal_id}")]]
                            ))

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
    for user_id in usernames:
        await bot.send_message(user_id, f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª.",
                               reply_markup=InlineKeyboardMarkup(
                                   inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data=f"join_{signal_id}")]]
                               ))

    await message.answer("–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞—Å—Å–ª–∞–Ω!", reply_markup=admin_menu())
    await state.clear()


@dp.callback_query(F.data == "list_users")
async def list_users(callback: types.CallbackQuery):
    if usernames:
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n" + "\n".join([f"- {name}" for name in usernames.values()])
    else:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    await callback.message.edit_text(text, reply_markup=admin_menu())


@dp.callback_query(F.data == "list_signals")
async def list_signals(callback: types.CallbackQuery):
    if signals:
        await callback.message.edit_text("üìú –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤:", reply_markup=signals_list_keyboard())
    else:
        await callback.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.", reply_markup=admin_menu())


@dp.callback_query(F.data.startswith("signal_"))
async def show_signal_details(callback: types.CallbackQuery):
    signal_id = callback.data.split("_")[1]
    signal = signals.get(signal_id)

    if signal:
        text = f"üìä –°–∏–≥–Ω–∞–ª:\n\n{signal['text']}"
        await callback.message.edit_text(text, reply_markup=signal_detail_keyboard(signal_id))
    else:
        await callback.message.edit_text("–°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_menu())


@dp.callback_query(F.data.startswith("join_"))
async def join_signal(callback: types.CallbackQuery):
    signal_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    username = callback.from_user.username or callback.from_user.full_name

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–∏–≥–Ω–∞–ª
    if signal_id in signals and username not in signals[signal_id]["users"]:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–∏–≥–Ω–∞–ª—É
        signals[signal_id]["users"].append(username)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º —Å–∏–≥–Ω–∞–ª –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, f"üìä –í–∞—à —Å–∏–≥–Ω–∞–ª:\n\n{signals[signal_id]['text']}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
        await bot.send_message(user_id, "‚úÖ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª. –ë–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª
        await bot.send_message(user_id, "üö´ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª
    await callback.answer()


@dp.callback_query(F.data.startswith("delete_signal_"))
async def delete_signal(callback: types.CallbackQuery):
    signal_id = callback.data.split("_")[2]
    if signal_id in signals:
        del signals[signal_id]
    await callback.message.edit_text("–°–∏–≥–Ω–∞–ª —É–¥–∞–ª—ë–Ω.", reply_markup=admin_menu())


@dp.callback_query(F.data.startswith("users_in_signal_"))
async def users_in_signal(callback: types.CallbackQuery):
    signal_id = callback.data.split("_")[3]
    if signal_id in signals:
        users = signals[signal_id]["users"]
        text = "üë• –ó–∞—à–µ–¥—à–∏–µ –≤ —Å–∏–≥–Ω–∞–ª:\n" + "\n".join([f"- {user}" for user in users]) if users else "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—à–µ–ª."
        await callback.message.edit_text(text, reply_markup=signal_detail_keyboard(signal_id))
    else:
        await callback.message.edit_text("–°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_menu())


@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu())


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
